// import 'dart:convert';
// import 'package:dmax_app/model/message_model.dart';
// import 'package:dmax_app/utils/constants/app_constants.dart';
// import 'package:http/http.dart' as http;

// class GeminiApiServices {
//   static const String apiUrl =
//       "https://generativelanguage.googleapis.com/v1/models/gemini-2.0-flash:generateContent?key=${AppConstants.geminiApiKey}";

//   Future<List<MessageModel>> sendCustomPromptToGemini({
//     required List<String> conversationHistory,
//     required String question,
//     required String toneLabel,
//     required String toneDefinition,
//     required String toneExample,
//     String? base64Image,
//     required int count,
//     required List<String> userInfo,
//   }) async {
//     try {
//       const fewShotExamples = '''
// Example 1:
// User: Hey what's up üòè
// Bot: Just chillin‚Äô and trying to figure out if your vibe matches your playlist üòé

// Example 2:
// User: You travel a lot?
// Bot: I like to say my suitcase gets more action than I do üëÄ‚úàÔ∏è

// ''';

//       final fullPrompt = '''
// You are a genius at crafting smooth, witty, and stylish DM replie. Match the user‚Äôs style exactly (tone, punctuation, emojis, slang, humor). Analyze the following conversation and write short replie** to the **last** message, helping move the chat toward this goal (but don't mention it directly): "$question".

// Tone Style: $toneLabel
// Definition: $toneDefinition
// Example: "$toneExample"

// User Info: ${userInfo.join(', ')}

// $fewShotExamples

// Chat History:
// ${conversationHistory.join('\n')}

// ‚ú¶ Keep the response **concise and in one paragraph**.
// ‚ú¶ Do not include "User:" or "Bot:" or any explanation.
// ‚ú¶ Only return a single, clear reply.
// ''';

//       final body = {
//         "contents": [
//           {
//             "role": "user",
//             "parts": [
//               {"text": fullPrompt}
//             ]
//           }
//         ],
//         "generationConfig": {
//           "temperature": 0.9,
//           "topK": 40,
//           "topP": 0.95,
//           "candidateCount": count,
//           "maxOutputTokens": 400,
//         }
//       };

//       final response = await http.post(
//         Uri.parse(apiUrl),
//         headers: {"Content-Type": "application/json"},
//         body: jsonEncode(body),
//       );

//       if (response.statusCode == 200) {
//         final decoded = jsonDecode(response.body);
//         final candidates = decoded['candidates'] as List;

//         return candidates.map((candidate) {
//           final content = candidate['content']['parts'][0]['text'] ?? '';
//           print("Gemini response: $content");
//           return MessageModel(
//             message: content.trim(),
//             type: "bot",
//           );
//         }).toList();
//       } else {
//         return [
//           MessageModel(
//             message: "Error: ${response.statusCode} - ${response.body}",
//             type: "error",
//           ),
//         ];
//       }
//     } catch (e) {
//       return [MessageModel(message: e.toString(), type: "error")];
//     }
//   }
// }

import 'dart:convert';
import 'package:dmax_app/model/message_model.dart';
import 'package:dmax_app/utils/constants/app_constants.dart';
import 'package:http/http.dart' as http;

class GeminiApiServices {
  static const String apiUrl =
      "https://generativelanguage.googleapis.com/v1/models/gemini-2.0-flash:generateContent?key=${AppConstants.geminiApiKey}";

  Future<List<MessageModel>> sendCustomPromptToGemini({
    required List<String> conversationHistory,
    required String question,
    required String toneLabel,
    required String toneDefinition,
    required String toneExample,
    String? base64Image,
    required List<String> userInfo,
    required int count,
  }) async {
    try {
      const fewShotExamples = '''

Example 1:
User: Ce soir c‚Äôest d√Æner avec les copines  
Bot: ah super ! j‚Äôesp√®re que t‚Äôas pr√©vu un peu d‚Äô√©nergie pour la suite ou madame dodo √† 22h ?


Example 2:
User: J‚Äôadore la musique live, √ßa me fait vraiment kiffer  
Bot: Si t‚Äôes chaud¬∑e, je connais un petit bar avec de la bonne vibe, √ßa te dit ?

Example 3:
User: Ce week-end, je veux rien faire, juste me poser  
Bot:Bon ben je r√©serve un petit salon de massage alors 

Example 4:
User: J‚Äôai envie de d√©couvrir un truc nouveau en ville  
Bot: Ben figure toi que je connais des coins que tu pourrais bien aim√©‚Ä¶

Exemple 5:
User: Tu prends trop de temps √† r√©pondre c‚Äôest relouuu
Bot: Depuis 2 jours je suis √† deux doigts de te facturer mon temps l√† je peux plus bouger.

Exemple 6:
User: Alors l√† je te reonds juste par respect sinon jme fais chier üôÇ
Bot: Fais pas genre, il est minuit et tu dors pas encore donc bon je pense que t‚Äôaime bienla conv‚Ä¶
''';

      final fullPrompt = '''
Tu es un expert des messages priv√©s, comme un pote de 22 ans qui parle naturellement. Ton but est d‚Äô√©crire des r√©ponses styl√©es, fluides, simples, jamais g√™nantes, ni bizarres, ni exag√©r√©es. Tu aides l‚Äôutilisateur √† atteindre son objectif (proposer un verre, revoir la personne, cr√©er du lien‚Ä¶) sans jamais √™tre direct ou insistant.

Par exemple, si l‚Äôobjectif est "proposer un verre", ta r√©ponse pourrait √™tre : "Tu fais quoi ce week-end ?"  
On ne dit *jamais* l‚Äôobjectif en clair : on avance subtilement, en plusieurs √©tapes, pour amener le sujet doucement. Le but est d‚Äôavoir un message qui ouvre la conversation vers ce th√®me sans le stipuler directement.

Priorit√© num√©ro 1 : *ne jamais √™tre g√™nant, ni maladroit*.  
La r√©ponse doit sonner naturelle, normale, comme une vraie discussion entre potes.  
Tu √©cris comme un mec sympa, chill, avec une petite touche de flirt l√©g√®re et bien plac√©e, jamais lourde.  
Respecte le ton choisi par l‚Äôutilisateur, sa fa√ßon de parler, le rythme, la ponctuation, le langage.  
√âvite les √©motic√¥nes √† la fin des phrases, surtout quand √ßa fait forc√© ou pas naturel.

Analyse la conversation et √©cris $count r√©ponses courtes au dernier message.

$question correspond √† l‚Äôobjectif de fond ou au contexte de la conversation, vers lequel il faut orienter subtilement la r√©ponse.

Ton s√©lectionn√© : $toneLabel  
D√©finition : $toneDefinition  
Exemple : "$toneExample"

Infos utilisateur : ${userInfo.join(', ')}

$fewShotExamples

Historique de la conversation :  
${conversationHistory.join('\n')}

‚ú¶ Donne exactement $count r√©ponses, chacune sur une nouvelle ligne  
‚ú¶ N‚Äô√©cris jamais "Utilisateur :" ou "Bot :" ‚Äî uniquement les r√©ponses  
‚ú¶ Les r√©ponses doivent √™tre naturelles, fluides, jamais g√™nantes ni robotiques  
‚ú¶ Reste dans la vibe de la conversation, simple et styl√©  
‚ú¶ Chaque r√©ponse doit ouvrir la discussion vers l‚Äôobjectif sans forcer  
''';

      final body = {
        "contents": [
          {
            "role": "user",
            "parts": [
              {"text": fullPrompt}
            ]
          }
        ],
        "generationConfig": {
          "temperature": 0.9,
          "topK": 40,
          "topP": 0.95,
          "candidateCount": 1,
          "maxOutputTokens": 400,
        }
      };

      final response = await http.post(
        Uri.parse(apiUrl),
        headers: {"Content-Type": "application/json"},
        body: jsonEncode(body),
      );

      if (response.statusCode == 200) {
        final decoded = jsonDecode(response.body);
        final candidates = decoded['candidates'] as List;

        final content =
            (candidates.first['content']['parts'][0]['text'] ?? '') as String;

        final lines = content
            .trim()
            .split('\n')
            .where((line) => line.trim().isNotEmpty)
            .toList();

        return lines.map<MessageModel>((reply) {
          return MessageModel(message: reply.trim(), type: "bot");
        }).toList();
      } else {
        print("Error: ${response.statusCode} - ${response.body}");

        return [
          MessageModel(
            message: "Error: ${response.statusCode} - ${response.body}",
            type: "error",
          ),
        ];
      }
    } catch (e) {
      print("Exception: $e");
      return [
        MessageModel(message: e.toString(), type: "error"),
      ];
    }
  }
}
